"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapTypeNames = exports.replaceDefaultTypeNames = exports.mapSelectedCodes = void 0;
var consts_1 = require("../../constants");
var index_1 = require("../index");
var mapSelectedCodes = function (selectedTypeNames) {
    var typePairs = consts_1.TYPE_NAMES;
    if (selectedTypeNames && Array.isArray(selectedTypeNames)) {
        typePairs = consts_1.TYPE_NAMES.filter(function (_a) {
            var code = _a[0];
            return selectedTypeNames.includes(code);
        });
    }
    return typePairs;
};
exports.mapSelectedCodes = mapSelectedCodes;
var replaceDefaultTypeNames = function (selectedTypePairs, userTypeNames) {
    var defaultTypeNames = new Map(consts_1.TYPE_NAMES);
    var preferedTypeNames = new Map(selectedTypePairs);
    if (userTypeNames) {
        Object.entries(userTypeNames).forEach(function (_a) {
            var code = _a[0], name = _a[1];
            try {
                index_1.validateUserTypeName([code, name], preferedTypeNames);
                preferedTypeNames.set(code, name);
            }
            catch (error) {
                if (error.message.includes('type name') || !defaultTypeNames.has(code)) {
                    throw error;
                }
            }
        });
    }
    return preferedTypeNames;
};
exports.replaceDefaultTypeNames = replaceDefaultTypeNames;
var mapTypeNames = function (gitmojiTypes, _a) {
    var _b = _a === void 0 ? {} : _a, selectedTypeNames = _b.selectedTypeNames, _c = _b.userTypeNames, userTypeNames = _c === void 0 ? null : _c;
    var typePairs = exports.mapSelectedCodes(selectedTypeNames);
    var preferedTypeNames = exports.replaceDefaultTypeNames(typePairs, userTypeNames);
    return gitmojiTypes
        .filter(function (_a) {
        var code = _a.code;
        return preferedTypeNames.has(code);
    })
        .map(function (gitMojiObject) { return (__assign(__assign({}, gitMojiObject), { name: preferedTypeNames.get(gitMojiObject.code) })); });
};
exports.mapTypeNames = mapTypeNames;
